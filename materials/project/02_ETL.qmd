---
title: "02_ETL"
description: "Pull raw data from database; transform, validate, filter, and write" 
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: load packages

library(tidyverse)
library(pointblank)
library(DBI)
library(odbc)
library(RPostgres)
library(tidystringdist)
library(pins)

```

Import data
```{r}
#| label: load data
#| cache: true

con <- dbConnect(RPostgres::Postgres(), 
                 host = Sys.getenv("DB_HOST"), 
                 port = "5432", 
                 dbname = "r_workshop", 
                 user = Sys.getenv("DB_USER"), 
                 password = Sys.getenv("DB_PASSWORD"))

inspections_processed <- tbl(con, "inspections_processed") |> collect()

bus_data_ref <- tbl(con, "bus_data_ref")



```


Question - what should we just filter out vs. identify by data validation?  What do we want to flag for data quality issues?

Perform data validation
```{r}
#| label: data validation

# Define a column schema so we can check inputted data is as expected
# Fun fact, also use .tbl argument in col_schema to compare the dataframe to an ideal table.
# troubleshooting, if this fails, look at the x_list$col_types and $col_names to see the discrepancy
schema_inspections <- col_schema(inspection_id = "numeric",
                               dba_name = "character",
                               aka_name = "character",
                               license_number = "numeric",
                               facility_type = "character",
                               risk = "character",
                               address = "character",
                               city = "character",
                               state = "character",
                               zip = "numeric",
                               inspection_date = "character",
                               inspection_type = "character",
                               results = "character",
                               violations = "character",
                               latitude = "numeric",
                               longitude = "numeric",
                               location = "character",
                               ref_dba_name = "character",
                               jw = "numeric")



agent_df_integrity <- 
  create_agent(inspections_processed) |> 
  #### Data set integrity validations. All of these trigger a warning under fail conditions.
  # verify column schema
  col_schema_match(schema_inspections, 
                   label = "Is the column schema as expected?", 
                   actions = action_levels(warn_at = 1)) |> 
  #Check that expected columns exist. We make a table in the preconditions using a table transform that is made up of the column names of our inspections table. Then compare those values to the set of schema_inspection names.
  col_vals_in_set(columns = value, 
                  set = names(schema_inspections), 
                  preconditions = ~. %>% tt_tbl_colnames, 
                  label = "Are the expected columns in the data set?", 
                  actions = action_levels(warn_at = 0.01) ) |> 
  # verify there are A LOT of rows of data to be sure import didn't mess up. 
  col_vals_gte(columns = n, 
               value = 100000L, # an arbitrary high-ish number
               preconditions = ~. %>% tally,
               label = "Are there more than 100k rows in the data?", 
               actions = action_levels(warn_at = 1)) |>
  interrogate()
agent_df_integrity
all_passed(agent_df_integrity)

#### Data integrity validations.
  # No null values
agent_main <-  
  create_agent(inspections_processed) |> 
  col_vals_not_null(columns = inspection_id) |> 
  col_vals_not_null(columns = dba_name) |> 
  col_vals_not_null(columns = address) |> 
  col_vals_not_null(columns = inspection_date) |> 
  col_vals_not_null(columns = inspection_type) |> 
  col_vals_not_null(columns = results) |> 
  # verify Inspection ID is unique
  rows_distinct(columns = vars(inspection_id), 
                label = "Is the Inspection ID unique?", 
                actions = action_levels(warn_at = 0.001)) |> 
  # verify inspection ID is valid
  col_vals_between(columns = inspection_id, 1000, 99999999, 
                   label = "Is the Inspection ID a valid entry?") |>
  # verify lat and long bounds (set na_pass = TRUE to ignore NAs)
  col_vals_between(columns = latitude, left = 41.5001, right = 42.3772, na_pass = TRUE) |> 
  col_vals_between(columns = longitude, left = -88.2959, right = -87.316, na_pass = TRUE) |> 
  # verify w col_vals_within_spec for postal_code / aka zip
  col_vals_within_spec(columns = zip, spec = "postal[USA]", na_pass = TRUE) |> 

  # find a reason to use serially()

  # Is the DBA inconsistent with that listed on the Business License?
  col_vals_lte(columns = jw, 
               value = 0.34, 
               label = "Dissimilarity measure between reported DBA Name and licensed DBA Name") |> 
  interrogate() 

agent_main





```
Inspect the agent report.

Pointblank will filter out rows that did not pass validation. 
```{r}
#| label: sunder data (def: sunder | verb | split apart)

# get passing data
inspections_validated <- agent_main |> get_sundered_data(type = c("pass"))

inspections_failed <- agent_main |> get_sundered_data(type = "fail")

nrow(inspections_failed)
nrow(inspections_validated)
```

Make a multi agent to track data integrity over time

- pin agent
- pin prune at 30 days
- call all pin versions, store each as a agent
- make multi agent

```{r}
# pin agent
board <- board_connect()

board |> pin_write(agent_main, name="inspection_agent")

board |> pin_upload("agent_main2")

```


Informant table / Data Dictionary 
```{r}
#| label: data dictionary

create_informant(
  tbl = inspections_raw,
  tbl_name = "Data Dictionary - Chicago Food Inspection Dataset",
  label = "Data Dictionary - Chicago Food Inspection Dataset") |> 
  info_tabular(
    description = "This table defines the columns in the City of Chicago Food Inspection dataset"
  ) |> 
  info_section(
    section_name = "further information",
    `source` = "Data from City of Chicago, <http://www.cityofchicago.org>",
    `üîÑ updates` = "Original data source updated every Friday. This table last updated {Sys.Date()}.",
    `‚ÑπÔ∏è note` = "This example material using data that has been modified for use from its original source, <www.cityofchicago.org>, the official website of the City of Chicago.  The City of Chicago makes no claims as to the content, accuracy, timeliness, or completeness of any of the data provided at this site.  The data provided at this site is subject to change at any time.  It is understood that the data provided at this site is being used at one's own risk."
  ) |> 
  info_columns(
    columns = "Inspection ID",
    `‚ÑπÔ∏è` = "A unique record number."
  ) |> 
  info_columns(
    columns = "DBA Name",
    `‚ÑπÔ∏è` = "'Doing Business As.' This is legal name of the establishment."
  ) |> 
  info_columns(
    columns = "AKA Name",
      `‚ÑπÔ∏è` = "'Also Known As.' This is the name the public would know the establishment as."
  ) |> 
  info_columns(
    columns = "License #",
      `‚ÑπÔ∏è` = "This is a unique number assigned to the establishment for the 
purposes of licensing by the Department of Business Affairs and Consumer Protection."
  ) |>  
  info_columns(
    columns = "Facility Type",
      `‚ÑπÔ∏è` =
      "Each establishment is described by one of the following: \n - bakery","banquet hall \n - candy store \n - caterer \n - coffee shop \n - day care center (for ages less than 2) \n - day care center (for ages 2 ‚Äì 6) \n - day care center (combo, for ages less than 2 and 2 ‚Äì 6 combined) \n - gas station \n - Golden Diner \n - grocery store \n - hospital \n - long term care center(nursing home) \n - liquor store \n - mobile food dispenser \n - restaurant \n - paleteria \n - school \n - shelter \n - tavern \n - social club \n - wholesaler \n - Wrigley Field Rooftop"
  )  |>
  info_columns(
    columns = "Risk",
      `‚ÑπÔ∏è` = "Risk category of facility: Each establishment is categorized as to its risk of adversely affecting the public's health, with 1 being the highest and 3 the lowest. The frequency of inspection is tied to this risk, with risk 1 establishments inspected most frequently and risk 3 least frequently."
  ) |>  
  info_columns(
    columns = "Address",
      `‚ÑπÔ∏è` = "Street address, city, state and zip code of facility: This is the complete address where the facility is located."
  ) |>  
  info_columns(
    columns = "City",
      `‚ÑπÔ∏è` = "City of the facility."
  ) |>  
  info_columns(
    columns = "State",
      `‚ÑπÔ∏è` = "State of the facility."
  ) |>  
  info_columns(
    columns = "Zip",
      `‚ÑπÔ∏è` = "Zip Code of the facility."
  ) |>  
  info_columns(
    columns = "Inspection Date",
      `‚ÑπÔ∏è` = "This is the date the inspection occurred. A particular establishment is likely to have multiple inspections which are denoted by different inspection dates."
  ) |>  
  info_columns(
    columns = "Inspection Type",
      `‚ÑπÔ∏è` = "An inspection can be one of the following types: canvass, the most common type of inspection performed at a frequency relative to the risk of the establishment; consultation, when the inspection is done at the request of the owner prior to the opening of the establishment; complaint, when  the inspection is done in response to a complaint against the establishment; license, when the inspection is done as a requirement for the establishment to receive its license to operate; suspect food poisoning, when the inspection is done in response to one or more persons claiming to have gotten ill as a result of eating at the establishment (a specific type of complaint-based inspection); task-force inspection, when an inspection of a bar or tavern is done. Re-inspections can occur for most types of these inspections and are indicated as such."
  ) |>  
  info_columns(
    columns = "Results",
      `‚ÑπÔ∏è` = "An inspection can pass, pass with conditions or fail. Establishments receiving a 'pass' were found to have no critical or serious violations (violation number 1-14 and 15-29, respectively). Establishments receiving a 'pass with conditions' were found to have critical or serious violations, but these were corrected during the inspection. Establishments receiving a 'fail' were found to have critical or serious violations that were not correctable during the inspection. An establishment receiving a 'fail' does not necessarily mean the establishment's licensed is suspended. Establishments found to be out of business or not located are indicated as such."
  ) |>  
  info_columns(
    columns = "Violations",
      `‚ÑπÔ∏è` = "An establishment can receive one or more of 45 distinct violations (violation numbers 1-44 and 70). For each violation number listed for a given establishment, the requirement the establishment must meet in order for it to NOT receive a violation is noted, followed by a specific description of the findings that caused the violation to be issued."
  ) |>  
  info_columns(
    columns = "Latitude",
      `‚ÑπÔ∏è` = "The Latitude of the facility."
  ) |>
  info_columns(
    columns = "Longitude",
      `‚ÑπÔ∏è` = "The Longitude of the facility."
  ) |>
  info_columns(
    columns = "Location",
      `‚ÑπÔ∏è` = "The Latitude and Longitude of the facility."
  ) |>
  incorporate()


```

Use email_create() to make a blastula object 

```{r}
#| label: unused code
#| include: false
#| eval: false

# This function removes text in parentheses. When in the Facility Type, this only obfuscates the Type
strip_parens <- function(x) {
  x |> str_remove_all("(?=\\().*?(?<=\\))") |> 
    str_squish()
}

# the expected facility types
ref_types <- tibble(facility_type = c("bakery","banquet hall", "candy store", "caterer", "coffee shop", "day care center", "gas station", "Golden Diner", "grocery store", "hospital", "long term care center", "nursing home", "liquor store", "mobile food dispenser", "restaurant", "paleteria", "school", "shelter", "tavern", "social club", "wholesaler", "Wrigley Field Rooftop") )

facilities <- 
  inspections_raw |> 
  select(facility_type) |> 
  # bind_rows(ref_types) |>
  mutate(facility_type = str_to_lower(facility_type)) |> 
  mutate(facility_type = strip_parens(facility_type)) |> 
  filter(!is.na(facility_type)) |>
  distinct() 

compare <- tidy_comb_all(facilities,facility_type)

comparisons <- tidy_stringdist(compare) |> 
  mutate(sim = 1-jaccard) |> 
  select(V1, V2, sim)

recommendation <- comparisons |> 
  group_by(V1) |> 
  summarise(max_sim = max(sim)) |> 
  ungroup()

comparisons |> 
  inner_join(recommendation, by = c("V1" = "V1", "sim" = "max_sim"))


```

