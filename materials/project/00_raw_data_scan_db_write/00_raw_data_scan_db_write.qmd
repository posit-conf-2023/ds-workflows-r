---
title: "00_Raw data download and write to DB and scan data"
description: Scheduled document to write raw data to database and write the data scan for reference
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: Load packages
#| echo: false
#| warning: false

library(tidyverse)
library(janitor)
library(DBI)
library(odbc)
library(RPostgres)
library(blastula)
library(pointblank)
library(glue)

```

# Download data from Chicago Data Portal

```{r}
#| label: Download data from Chicago Data Portal

start_time <- Sys.time()
inspections_raw <- readr::read_csv("https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.csv") |> 
  #clean column names so they are postgres-compliant (no special characters or spaces) and less annoying to type
  clean_names() |> 
  #convert data to uppercase for uniformity
  mutate(across(where(is.character), toupper)) 
end_time <- Sys.time()
duration <- end_time - start_time
print(paste("ℹ️ Info: Downloading Inspection data took", round(duration[[1]], 2),  units(duration)))


# DATASET 2: Business data
start_time <- Sys.time()
bus_data_raw <- readr::read_csv("https://data.cityofchicago.org/api/views/r5kz-chrr/rows.csv") |> 
  #clean column names so they are postgres-compliant (no special characters or spaces) and less annoying to type
  clean_names() |> 
  #Drop unnecessary columns. We only want to use this table to cross reference Licence Number to business name, location, 
  select(license_number, 
         legal_name, 
         doing_business_as_name, 
         license_term_expiration_date,
         address, 
         city, 
         state, 
         zip_code, 
         license_description, 
         business_activity,
         latitude, 
         longitude, 
         location) |> 
  #convert data to uppercase for uniformity
  mutate(across(where(is.character), toupper)) 
end_time <- Sys.time()
duration <- end_time - start_time
print(paste("ℹ️ Info: Downloading Business License data took", round(duration[[1]], 2),  units(duration)))


```


# Load data into database
```{r}
#| label: Write raw data to database

# The `RPostgres` package is DBI-compliant and is built specifically for PosgreSQL DB. Performance may be faster than using the generic odbc package. It's perfectly reasonable to use the odbc package instead, and if we do, if we instead use the generic `odbc::odbc()` backend, the database will appear in the Connections pane. 
con <- dbConnect(RPostgres::Postgres(), 
                 host = Sys.getenv("DB_HOST"), 
                 port = "5432", 
                 dbname = "r_workshop", 
                 user = Sys.getenv("DB_USER"), 
                 password = Sys.getenv("DB_PASSWORD"))

# con_alternative <- dbConnect(odbc::odbc(), 
#                   Driver = "postgresql", 
#                   Server = Sys.getenv("DB_HOST"), 
#                   Port = "5432", 
#                   Database = "r_workshop", 
#                   UID = Sys.getenv("DB_USER"),    
#                   PWD = Sys.getenv("DB_PASSWORD"), 
#                   timeout = 10)

# write inspections raw data
start_time <- Sys.time()
dbWriteTable(con, "inspections_raw", inspections_raw, overwrite = TRUE)
end_time <- Sys.time()
duration <- end_time - start_time
print(paste("ℹ️ Info: Writing raw inspection data to database took", round(duration[[1]], 2),  units(duration)))



# write business license raw data
starts_time <- Sys.time()
dbWriteTable(con, "bus_data_raw", bus_data_raw, overwrite = TRUE)
end_time <- Sys.time()
duration <- end_time - start_time
print(paste("ℹ️ Info: Writing raw business license data to database took", round(duration[[1]], 2),  units(duration)))



insp_db <- tbl(con, "inspections_raw")
insp_db_rowcount <- insp_db |> tally() |> pull(n) |> as.numeric()

bus_db <- tbl(con, "bus_data_raw")
bus_db_rowcount <- bus_db |>  tally() |> pull(n) |> as.numeric()


dbDisconnect(con)
```


## Alert me if there's an issue with the data download, otherwise don't send an email

```{r}
#| label: Alert of data download has issues

alert_me <- (insp_db_rowcount < 100000 | bus_db_rowcount < 100000)

if (alert_me == FALSE){
  email_alert <- render_connect_email(input = "email-00_db_load_alert.Rmd")
  
  attach_connect_email(email_alert,
                       subject = "⚠️Inspections Project: DB Raw Data Load Issue")
} else {
  suppress_scheduled_email()
}


```


# Generate data scan for reference

```{r}
#| label: Data scan on inspections_raw

scan <- pointblank::scan_data(inspections_raw, sections = "OVMS")
scan


```


# Logging information
```{r}
#| label: logging
#| echo: false
#| results: asis

# note: the `results: asis` option will render the email html output for viewing.

glue("Report run {blastula::add_readable_time()}")

if(alert_me == TRUE){
  glue("An alert was triggered due to an unexpectedly low number of rows in the raw dataset. An email alert was generated, and is shown below. {email_alert$html_html}")
} else {
  glue("Raw data written successfully to database.")
}

```

