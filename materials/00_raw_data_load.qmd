---
title: "00_Raw Data Load"
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: Load packages

library(dplyr)
library(janitor)
library(DBI)
library(odbc)
library(RPostgres)

```


Pull data from City of Chicago
```{r}
#| label: Pull data

# Food inspections data
inspections_raw <- readr::read_csv("https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.csv") |> 
  #clean column names so they are postgres-compliant (no special characters or spaces)
  clean_names() |> 
  #convert data to uppercase for uniformity
  mutate(across(where(is.character), toupper)) 

# Business data
bus_data_raw <- readr::read_csv("https://data.cityofchicago.org/api/views/r5kz-chrr/rows.csv") |> 
  #clean column names so they are postgres-compliant (no special characters or spaces)
  clean_names() |> 
  #Drop unnecessary columns. We only want to use this table to cross reference Licence Number to business name, location, 
  select(license_number, 
         legal_name, 
         doing_business_as_name, 
         address, 
         city, 
         state, 
         zip_code, 
         license_description, 
         business_activity,
         latitude, 
         longitude, 
         location) |> 
  #convert data to uppercase for uniformity
  mutate(across(where(is.character), toupper)) 

```

```{r}
#| label: df summaries
# TODO: pin some summary statistics so we can see it's updating.  Deets from 2023-06-29 

inspections_raw |> select(inspection_date) |> filter(grepl("2023", inspection_date)) |> arrange(desc(inspection_date)) |> group_by(inspection_date) |> tally() |> arrange(desc(inspection_date))
# # A tibble: 122 Ã— 2
#    inspection_date     n
#    <chr>           <int>
#  1 06/27/2023         12
#  2 06/26/2023         13
#  3 06/23/2023         42
#  4 06/22/2023         45
#  5 06/21/2023         66
#  6 06/20/2023         50
#  7 06/16/2023         56
#  8 06/15/2023         59
#  9 06/14/2023         61
# 10 06/13/2023         69
```


Load data into database
```{r}
#| label: Write to database

# The `RPostgres` package is DBI-compliant and is built specifically for PosgreSQL DB. Performance may be faster than using the generic odbc package. However, if we instead use the generic `odbc::odbc()` backend, the database will appear in the Connections pane. 
con <- dbConnect(RPostgres::Postgres(), 
                 host = Sys.getenv("DB_HOST"), 
                 port = "5432", 
                 dbname = "r_workshop", 
                 user = Sys.getenv("DB_USER"), 
                 password = Sys.getenv("DB_PASSWORD"))

# con_alternative <- dbConnect(odbc::odbc(), 
#                   Driver = "postgresql", 
#                   Server = Sys.getenv("DB_HOST"), 
#                   Port = "5432", 
#                   Database = "r_workshop", 
#                   UID = Sys.getenv("DB_USER"),    
#                   PWD = Sys.getenv("DB_PASSWORD"), 
#                   timeout = 10)

# write inspections raw data
dbWriteTable(con, "inspections_raw", inspections_raw, overwrite = TRUE)
print("Raw inspection data updated ðŸŽ‰")

# write business license raw data
dbWriteTable(con, "bus_data_raw", bus_data_raw, overwrite = TRUE)
print("Raw business license data updated ðŸŽ‰")


insp_db <- tbl(con, "inspections_raw")
insp_db |> tally()

bus_db <- tbl(con, "bus_data_raw")
bus_db |>  tally()


dbDisconnect(con)
```

