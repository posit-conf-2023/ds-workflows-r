---
title: "01_Raw and Reference Data Load to Database and Pins"
description: Scheduled document to write raw and reference data to database and pin
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: Load packages

library(dplyr)
library(janitor)
library(DBI)
library(odbc)
library(RPostgres)
library(pins)

```

Pull data from City of Chicago
```{r}
#| label: Pull raw data

# DATASET 1: Food inspections data, with some time logging for rerference
start_time <- Sys.time()
inspections_raw <- readr::read_csv("https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.csv") |> 
  #clean column names so they are postgres-compliant (no special characters or spaces) and less annoying to type
  clean_names() |> 
  #convert data to uppercase for uniformity
  mutate(across(where(is.character), toupper)) 
end_time <- Sys.time()
duration <- end_time - start_time
print(paste("ℹ️ Info: Downloading Inspection data took", round(duration[[1]], 2),  units(duration)))


# DATASET 2: Business data
start_time <- Sys.time()
bus_data_raw <- readr::read_csv("https://data.cityofchicago.org/api/views/r5kz-chrr/rows.csv") |> 
  #clean column names so they are postgres-compliant (no special characters or spaces) and less annoying to type
  clean_names() |> 
  #Drop unnecessary columns. We only want to use this table to cross reference Licence Number to business name, location, 
  select(license_number, 
         legal_name, 
         doing_business_as_name, 
         license_term_expiration_date,
         address, 
         city, 
         state, 
         zip_code, 
         license_description, 
         business_activity,
         latitude, 
         longitude, 
         location) |> 
  #convert data to uppercase for uniformity
  mutate(across(where(is.character), toupper)) 
end_time <- Sys.time()
duration <- end_time - start_time
print(paste("ℹ️ Info: Downloading Business License data took", round(duration[[1]], 2),  units(duration)))


```

```{r}
#| label: DBA reference table 

# make a reference table of DBA Names using the most current business license number to act as the "source of truth" for correct DBA names
bus_data_ref <- 
  bus_data_raw |> 
  # Convert date field from character to date format
  mutate(license_term_expiration_date = lubridate::mdy(license_term_expiration_date)) |> 
  group_by(license_number) |> 
  arrange(desc(license_term_expiration_date)) |> 
  # Keep only the most rencent entry for a particular license number
  slice(1) |> 
  ungroup()


```
  

```{r}
#| label: Thin out inspection data pre-validation

inspections_pass1 <- 
  inspections_raw |> 
  filter(
    # Filter for "RESTAURANTS" and variations including "REST", "RSTRNT", etc.
    grepl("RE?STA?U?R?A?N?T?", `facility_type`) | 
    # OR Filter for "BAKERY" and variations to account for typos or shortenings
    grepl("BA?KE?R?Y?", `facility_type`) | 
    # OR Filter for "COFFEE SHOP" and variations, but consciously including "SHOP" to avoid carts, roasters, vending machines
    grepl("COFFEE *SHOP", `facility_type`) | 
    # OR Filter for "WRIGLEY"
    grepl("WRIGLEY", `facility_type`)
    ) 

#Now let's also join in the reference business data table so we have a "source of truth" DBA name to check against.
inspections_pass2 <- 
  inspections_pass1 |> 
  left_join(select(bus_data_ref, license_number, doing_business_as_name), by=join_by(license_number)) |>
  rename(ref_dba_name = doing_business_as_name) 

# Finally, add a column with the Jaro ("jw") string distance to help us determine how similar or dissimilar the inspectors' inputted dba name is to the reference. A distance of 0 indicates identical; a 1 indicates completely dissimilar
inspections_processed <- tidystringdist::tidy_stringdist(inspections_pass2,v1=dba_name, v2=ref_dba_name, method="jw") 

```


```{r}
#| label: summary statistics


# TODO: pin some summary statistics so we can see it's updating.  Deets from 2023-06-29 

inspections_raw |> select(inspection_date) |> filter(grepl("2023", inspection_date)) |> arrange(desc(inspection_date)) |> group_by(inspection_date) |> tally() |> arrange(desc(inspection_date))
# # A tibble: 122 × 2
#    inspection_date     n
#    <chr>           <int>
#  1 06/27/2023         12
#  2 06/26/2023         13
#  3 06/23/2023         42
#  4 06/22/2023         45
#  5 06/21/2023         66
#  6 06/20/2023         50
#  7 06/16/2023         56
#  8 06/15/2023         59
#  9 06/14/2023         61
# 10 06/13/2023         69
```


Load data into database
```{r}
#| label: Write raw data to database

# The `RPostgres` package is DBI-compliant and is built specifically for PosgreSQL DB. Performance may be faster than using the generic odbc package. It's perfectly reasonable to use the odbc package instead, and if we do, if we instead use the generic `odbc::odbc()` backend, the database will appear in the Connections pane. 
con <- dbConnect(RPostgres::Postgres(), 
                 host = Sys.getenv("DB_HOST"), 
                 port = "5432", 
                 dbname = "r_workshop", 
                 user = Sys.getenv("DB_USER"), 
                 password = Sys.getenv("DB_PASSWORD"))

# con_alternative <- dbConnect(odbc::odbc(), 
#                   Driver = "postgresql", 
#                   Server = Sys.getenv("DB_HOST"), 
#                   Port = "5432", 
#                   Database = "r_workshop", 
#                   UID = Sys.getenv("DB_USER"),    
#                   PWD = Sys.getenv("DB_PASSWORD"), 
#                   timeout = 10)

# write inspections raw data
dbWriteTable(con, "inspections_raw", inspections_raw, overwrite = TRUE)
print("Raw inspection data updated 🎉")

# write processed inspections data
dbWriteTable(con, "inspections_processed", inspections_processed, overwrite = TRUE)
print("Processed inspection data updated 🎉")

# write business license raw data
dbWriteTable(con, "bus_data_raw", bus_data_raw, overwrite = TRUE)
print("Raw business license data updated 🎉")

# write business name reference table
dbWriteTable(con, "bus_data_ref", bus_data_ref, overwrite = TRUE)
print("Reference business name data updated 🎉")


# insp_db <- tbl(con, "inspections_raw")
# insp_db |> tally()
# 
# bus_db <- tbl(con, "bus_data_raw")
# bus_db |>  tally()


dbDisconnect(con)
```


Let's also pin our processed data and reference business data
```{r}
#| label: pin the data

board <- board_connect()
user_name <- "katie.masiello"
board |> pin_write(inspections_processed,name = paste0(user_name,"/inspections_processed"), type="arrow")

board |> pin_write(bus_data_ref,name = paste0(user_name,"/bus_data_ref"), type="arrow")


```

