---
title: "activity-03_data_validation.qmd"
description: "This notebook performs data validation using `pointblank`"
toc: true
toc-depth: 4
editor: visual
editor_options: 
  markdown:
    wrap: 72
    canonical: true
execute: 
  eval: true
---

## Goals

The goals of this activity are to:

-   Use the `pointblank` package to perform data validations

-   Define thresholds in data validation to be used for alerting

-   Create an informant data dictionary

✏️ There will be placeholders (`____`) in the code cells below that you
will need to fill in!

## Setup

### Load required packages for data validation

```{r}
#| label: Load packages

library(tidyverse)
library(pointblank)

```

### Read data from pin

We are going to start with a data set called `inspections_filtered`.
This data is an extract from the original `inspections_raw` data set,
which has been filtered to only include records of interest.
Specifically, it only includes inspection records that were marked as
"Pass", "Fail", or "Pass w/ Conditions" from the following Facility
Types:

\- Restaurants

\- Grocery Stores

\- Bakeries

\- Coffee Shops

\- Wrigley Field Rooftop (because that sounds pretty fun)

This data has been saved for you as a pin.

## [pins](https://pins.rstudio.com/) is a package for R and Python that makes it easy to share objects (e.g., data frames, models) across projects and team members.

![](https://pins.rstudio.com/logo.png){fig-align="center" width="212"}

📌 Objects in R and Python can be "pinned" to a "board" so that they are
easily shared

📌 The board is like a virtual corkboard, your object is pinned with a
virtual thumbtack

📣 Pin intermediate data and objects, not your source of truth. Pins are
not a substitute for a database

📌 When the board is Posit Connect, the same access controls for content
can be applied

📌 We will talk more about pins during the Modeling section of this
workshop!

```{r read-data-from-pin}

# Define the virtual corkboard. Do not add any arguments to this code; run as-is.
board <- pins::board_connect()

# Read the existing pin with the data we'll use for this exercise.
inspections_filtered <- board |> 
  pins::pin_read("katie.masiello/inspections_filtered")

inspections_filtered

```

## Task 1 - Data validation on `inspections_filtered`

🔄 Task

Use the `pointblank` package to validate our `inspections_filtered`
dataset

-   create an agent
-   define validations
-   interrogate the table

✅ Solution

The first step in the `pointblank` workflow is to create an **agent.**

```{r}
#| label: create agent for small_table

agent <- pointblank::create_agent(inspections_filtered)
agent
```

On its own, the agent is not very informative. It's waiting for
validations to be defined and an interrogation action to be performed.

Now we define our **data validation functions**. A few have been started
for you as examples. Create your own and explore! Refer to the package
documentation for the validation function reference:
<https://rstudio.github.io/pointblank/reference/index.html#validation-expectation-and-test-functions>

```{r}
#| label: define validations for inspections_filtered

agent <- agent |> 
  # verify inspection ID is between two arbitrary numbers so we can see some failed records
  col_vals_between(columns = inspection_id, 50000, 1000000, 
                   label = "Is the Inspection ID a valid entry?") |> 
  # verify license number is greater than 1000
  col_vals_gt(columns = license_number, 1000) |> 
  # verify inspection date is valid
  col_vals_lte(columns = inspection_date, today(),
               label = "Is inspection date in the past?") 

  
agent

```

If we look at the output of `agent`, it shows our validation plan, but
the action is yet to come when we **interrogate**.

```{r}
#| label: interrogate the small_table agent

agent |> interrogate()

```

Explore the validation report. Can you:

1.  Identify what fail percentage each validation had?
2.  Identify how many rows failed each validation?
3.  View the CSV extracts of failed data?

## Task 2 - Add Action Levels

🔄 Task

Iterate on your agent created for `small_table` and add action levels.
Action levels behave like tags. You can decide what threshold you want
to put for `notify`, `warn`, and `stop`. At a minimum, the tag will
provide a visual indicator of threshold exceedance in the validation
table. You can also use these tags post-interrogation to take actions.

✅ Solution

The action levels can be set as an **integer**, representing the
threshold number of failing units , or a **fraction**, representing the
fraction of failing units.

Use
`actions = action_levels(warn_at = ____, stop_at = ____, notify_at = ____)`
to add action levels to one, some, or all of your validations and rerun
the interrogation to see the output. Some samples have been provided.

```{r}
#| label: validation of inspections_filtered with action levels

agent_with_actions <- create_agent(inspections_filtered) |> 
  # verify inspection ID is between two arbitrary numbers so we can see some failed records
  col_vals_between(columns = inspection_id, 50000, 1000000, 
                   label = "Is the Inspection ID a valid entry?",
                   actions = action_levels(warn_at = 0.1, stop_at = 0.3)) |> 
  # verify license number is greater than 1000
  col_vals_gt(columns = license_number, 1000,
              actions = action_levels(warn_at = 0.015)) |> 
  # verify inspection date is valid
  col_vals_lte(columns = inspection_date, today(),
               label = "Is inspection date in the past?",
               actions = action_levels(notify_at = 0.10)) |> 
  interrogate()

agent_with_actions

```

## Task 3 - Remove failing data from the dataset

🔄 Task

Pointblank has identified all of the rows of `inspections_filtered` that
passed and failed validation. Now remove those that failed so the data
that is passed downstream to our modeling step is squeaky clean.

✅ Solution

Pointblank provides a number of [post-interrogation functions](#0) to
work with intel gathered from the validation. For this task, we will
"sunder" the data using `pointblank::get_sundered_data()`.

> **💡 sunder** /sun·der / ˈsən-dər / *verb* \| to split apart

```{r}
#| label: sunder data

# Passed data
inspections_validated <- get_sundered_data(agent = agent_with_actions,
                                           type = "pass")

# Failed data
inspections_failed_validation <- get_sundered_data(agent = agent_with_actions,
                                                   type = "fail")

```

## Task 4 - Provide a data dictionary (aka Informant) to explain the data

🔄 Task

Data should never be used blindly. Proper documentation is essential.
Pointblank can generate an `informant` table (OR or data dictionary)
that can provide both static and dynamically-rendered details about your
data.

Create a data dictionary for `inspections_validated`.

✅ Solution

Table information can be synthesized in an information management
workflow, giving us a snapshot of a data table we care to collect
information on. The pointblank informant is fed a series of `info_*()`
functions to define bits of information about a table. This info text
can pertain to individual columns, the table as a whole, and whatever
additional information makes sense for your organization. We can even
glean little snippets of information (like column stats or sample
values) from the target table with `info_snippet()` and the `snip_*()`
functions and mix them into the data dictionary wherever they're needed.

First let's see the bare bones informant table that `pointblank` can
create.

```{r}
#| label: basic informant for small_table_validated

create_informant(
  tbl = inspections_validated
)

```

The bare table already gives a summary of the table size, shape, and
column schema. But Now let's add to this with some `info_*()` functions
to make it more useful. Reference the Informative Functions section of
the `pointblank` documentation:
<https://rstudio.github.io/pointblank/reference/index.html#information-functions>.
A few sections have been provided as examples. Notice that markdown
syntax is supported!

```{r}
#| label: create data dictionary 

create_informant(
  tbl = inspections_validated,
  label = "Data Dictionary - Validated Data from Chicago Food Inspection Dataset, Processed for Model Training") |> 
  info_tabular(
    description = "This table defines the columns in the processed dataset from City of Chicago Food Inspection dataset. It has been validated and processed for use as a model training dataset."
  ) |> 
  info_section(
    section_name = "further information",
    `source` = "Data from City of Chicago, <https://www.cityofchicago.org>",
    `🔄 updates` = "Original data source updated every Friday. This table last updated {Sys.Date()}.",
    `ℹ️ note` = "This example material using data that has been modified for use from its original source, <https://www.cityofchicago.org>, the official website of the City of Chicago.  The City of Chicago makes no claims as to the content, accuracy, timeliness, or completeness of any of the data provided at this site.  The data provided at this site is subject to change at any time.  It is understood that the data provided at this site is being used at one's own risk."
  ) |> 
  info_columns(
    columns = inspection_id,
    `ℹ️` = "A unique record number."
  ) |> 
  info_columns(
    columns = dba_name,
    `ℹ️` = "'Doing Business As.' This is legal name of the establishment."
  ) |> 
  info_columns(
    columns = aka_name,
      `ℹ️` = "'Also Known As.' This is the name the public would know the establishment as."
  ) |> 
  info_columns(
    columns = license_number,
      `ℹ️` = "This is a unique number assigned to the establishment for the 
purposes of licensing by the Department of Business Affairs and Consumer Protection."
  ) |>  
  info_columns(
    columns = facility_type,
      `ℹ️` =
      "Cleaned and validated data includes only establishments described by one of the following: \n - **Bakery** \n - **Coffee Shop** \n - **Grocery Store** \n - **Restaurant** \n - **Wrigley Field Rooftop**"
  )  |>
  info_columns(
    columns = risk,
      `ℹ️` = "Risk category of facility. Each establishment is categorized as to its risk of adversely affecting the public's health, with 1 being the highest and 3 the lowest. The frequency of inspection is tied to this risk, with risk 1 establishments inspected most frequently and risk 3 least frequently."
  ) |>  
  info_columns(
    columns = address,
      `ℹ️` = "Street address, city, state and zip code of facility: This is the complete address where the facility is located."
  ) |>  
  info_columns(
    columns = city,
      `ℹ️` = "City of the facility."
  ) |>  
  info_columns(
    columns = state,
      `ℹ️` = "State of the facility."
  ) |>  
  info_columns(
    columns = zip,
      `ℹ️` = "Zip Code of the facility."
  ) |>  
  info_columns(
    columns = inspection_date,
      `ℹ️` = "This is the date the inspection occurred. A particular establishment is likely to have multiple inspections which are denoted by different inspection dates."
  ) |>  
  info_columns(
    columns = inspection_type,
      `ℹ️` = "An inspection can be one of the following types: \n - **canvass**: the most common type of inspection performed at a frequency relative to the risk of the establishment \n - **consultation**: when the inspection is done at the request of the owner prior to the opening of the establishment \n - **complaint**: when  the inspection is done in response to a complaint against the establishment \n - **license**: when the inspection is done as a requirement for the establishment to receive its license to operate \n - **suspect food poisoning**: 🤢when the inspection is done in response to one or more persons claiming to have gotten ill as a result of eating at the establishment (a specific type of complaint-based inspection) \n - **task-force inspection**: when an inspection of a bar or tavern is done. \n Re-inspections can occur for most types of these inspections and are indicated as such."
  ) |>  
  info_columns(
    columns = results,
      `ℹ️` = "An inspection can pass, pass with conditions or fail. Establishments receiving a 'pass' were found to have no critical or serious violations (violation number 1-14 and 15-29, respectively). Establishments receiving a 'pass with conditions' were found to have critical or serious violations, but these were corrected during the inspection. Establishments receiving a 'fail' were found to have critical or serious violations that were not correctable during the inspection. An establishment receiving a 'fail' does not necessarily mean the establishment's licensed is suspended."
  ) |>  
  info_columns(
    columns = violations,
      `ℹ️` = "An establishment can receive one or more of 45 distinct violations (violation numbers 1-44 and 70). For each violation number listed for a given establishment, the requirement the establishment must meet in order for it to NOT receive a violation is noted, followed by a specific description of the findings that caused the violation to be issued."
  ) |>  
  info_columns(
    columns = latitude,
      `ℹ️` = "The Latitude of the facility."
  ) |>
  info_columns(
    columns = longitude,
      `ℹ️` = "The Longitude of the facility."
  ) |>
  info_columns(
    columns = location,
      `ℹ️` = "The Latitude and Longitude of the facility."
  ) |>
  # Using `incorporate` will run any calculations defined within the table
  incorporate()


```
