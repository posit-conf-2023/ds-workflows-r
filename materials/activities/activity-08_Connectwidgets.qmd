---
title: "connectwidgets"
description: "Curate the content in our workshop by creating a connectwidget"
toc: true
toc-depth: 4
editor_options: 
  markdown:
    canonical: true 
execute: 
  eval: false
editor: visual
---

::: callout-note
## [connectwidgets](https://rstudio.github.io/connectwidgets/) is an R package that can be used to query a Posit Connect server for a subset of your existing content items, then organize them within htmlwidget components in an R Markdown document or Shiny application.
:::

![](https://github.com/rstudio/connectwidgets/blob/main/man/figures/logo.png?raw=true){fig-align="center" width="212"}

## Setup

```{r}
#| label: load-packages

library(connectwidgets)
library(tidyverse)
library(usethis)
```

## Activity 1 - Create Environment Variables

Before we can connect to the Posit Connect instance, you first need to tell `connectwidgets` two things:

1.  What's your Connect server URL?
2.  What's you Connect API key?

These two things will be saved in your *environment* as environment variables: `CONNECT_SERVER` and `CONNECT_API_KEY`. It's important, especially for your API key, to never include it in your source code. API keys should be treated like passwords. Our recommendation is to define these environment variables within your `.Renviron` file. This file may not exist yet in your project directory...yet! In this assignment, you will learn how to create a `.Renviron` file and how to assign environment variables.

ðŸ”„ Tasks

-   Learn how to view environment variables.

-   Create a `.Renviron` file in the home directory of your RStudio Project using the `usethis` package.

-   Assign a new environment variable: `CONNECT_API_KEY`.

### View Environment Variables

We need to create two environment variables in order to work with `connectwidgets`. One of these has already been created for you by your system administrator! Use the `Sys.getenv()` function below to view the `CONNECT_SERVER` environment variable. You'll need to fill in the blanks (`____`) with the name of the environment variable.

```{r}
# View CONNECT_SERVER environment variable
Sys.getenv("CONNECT_SERVER")
```

### Create `.Renviron` file

To create your own environment variables, you'll want to place them inside your `.Renviron` file that lives in your project's home directory and will be run as soon as you start a new R session. The `usethis` package has some built-in functions to help us out! Below, use the `edit_r_environ()` function to add a `.Renviron` for the current project. You'll need set the `scope` to "project" to ensure the `.Renviron` is created within the home directory of the project, and not your user home directory.

```{r}
# Create a .Renviron file in your project's home directory. Scope should be set to "project"
usethis::edit_r_environ(scope = "____")
```

By running the command above, it should open the `.Renviron` file automatically.

### Create a Posit Connect API key

Navigate to Posit Connect and click your name in the top right corner. Click the `API Keys` option. Create a new API key, and call it whatever you want. "workbench_key" is a good suggestion. Copy the API key and add it to your `.Renviron` file as shown below:

```         
CONNECT_API_KEY=your-api-key-goes-here
```

::: callout-important
Make sure to restart your R session (Session --\> Restart R) after you modify your `.Renviron` file!
:::

Verify that you've correctly assigned the `CONNECT_API_KEY` environment variable by running the `Sys.getenv()` function.

```{r}
# View CONNECT_API_KEY environment variable
Sys.getenv("____")
```

## Activity 2 - Connect and View Content on Posit Connect

Now that we've assigned our two environment variables, let's try using the `connect()` function from within `connectwidgets` to connect to our Posit Connect instance. Once connected, we can start viewing content!

ðŸ”„ Tasks

-   Connect to Posit Connect using `connectwidgets::connect()`

-   View content on Posit Connect server.

### Connect to Posit Connect

Establish a connection to Posit Connect using `connectwidgets::connect()`

```{r}
# Establish a connection to the Connect Server
client <- connect(
  server  = Sys.getenv("____"),
  api_key = Sys.getenv("____")
  )
```

Verify the connection:

```{r}
# Verify connection
client
```

### View Content on Posit Connect

Now that we've established connection, let's return a dataframe of content that is currently published to Posit Connect:

```{r}
# Return a dataframe of content currently published to Posit Connect 
connect_content <- client |> 
  content()
```

Sometimes it's easier to filter the content based on certain criteria. Try adding your Connect username to the `by_owner()` function to view content owned by **you**!

```{r}
# Filter for your content
my_content <- connect_content |> 
  by_owner(usernames = "____")

my_content
```

## Activity 3 - Explore `connectwidgets` layout options

After filtering for content on Posit Connect, we can use `connectwidgets` to organize the content into cards grid, and table widgets. These widgets can be embedded into R Markdown, Quarto, or a Shiny application!

ðŸ”„ Tasks

-   Use the `rsc_card()` and `rsc_table()` function to create widgets of **your** Posit Connect published content.

```{r}
# card
my_content |> 
  ____
```

```{r}
### table
my_content %>%
  ____
```
