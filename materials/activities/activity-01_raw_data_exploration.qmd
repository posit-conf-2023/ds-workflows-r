---
title: "Raw Data Exploration"
description: "Conduct ad hoc exploration of the data, first exposure to `pointblank`"
toc: true
toc-depth: 4
editor: visual
editor_options: 
  markdown:
    wrap: 72
    canonical: true
execute: 
  eval: false
---

## Introduction

This workshop will use data from the City of Chicago Open Data Portal:
<https://data.cityofchicago.org>. The following datasets will be used
for the project:

1.  üçïFood inspections:
    <https://data.cityofchicago.org/Health-Human-Services/Food-Inspections/4ijn-s7e5>
2.  üìíBusiness license data:
    <https://data.cityofchicago.org/Community-Economic-Development/Business-Licenses/r5kz-chrr>

For this activity, we will explore the Food Inspections dataset.

## Goals

The goals of this activity are to:

-   get familiar with the Food Inspections dataset
-   gain experience using `pointblank::scan_data` to summarize data

This will give you the first clues for what data cleaning and
validations will be relevant for this project.

‚úèÔ∏è There will be placeholders (`____`) in the code cells below that you
will need to fill in!

## Setup

### Load required packages for importing and exploring the data

```{r}
#| label: Load packages

library(tidyverse)
library(pointblank)
library(ggforce)
library(tidyverse)

```

### Download raw data

The City of Chicago data portal provides access to their datasets via
the Socrata Open Data (SODA) API. Consulting the documentation provides
us with some examples of how to use SODA:
<https://dev.socrata.com/foundry/data.cityofchicago.org/4ijn-s7e5>.

We will query the SODA API directly and download the full dataset as a
`.csv` using `readr::read_csv()`.

There is a R package called `RSocrata` to interact with SODA, however,
in our initial testing, the column schemas were better-preserved using
`readr` as opposed to using the `RSocrata` package.

Note we are using an environment variable called **SOCRATA_APP_TOKEN**.
This has been preconfigured for you for the purposes of this workshop.

```{r}
#| label: Download raw inspections data from City of Chicago

inspections_raw <- 
  readr::read_csv(paste0("https://data.cityofchicago.org/api/views/4ijn-s7e5/rows.csv?$$app_token=",Sys.getenv("SOCRATA_APP_TOKEN")))

inspections_raw
```

Feel free to use the code chunk below to explore the raw data. Maybe try
`str`, `summary`, or `skimr::skim()`?

```{r}
#| label: your space to explore

inspections_raw



```

## Task 1 - Scan the data

üîÑ Task

Use the `pointblank` package to gather basic information about the Food
Inspections data so we can

-   Understand what the data is
-   Get a sense for how much cleaning is required
-   Plan our approach for data validation

‚úÖ Solution

::: callout-note
## [pointblank](https://github.com/rstudio/pointblank) is an R package that provides data quality assessment and metadata reporting for data frames and database tables.
:::

![](https://github.com/rstudio/pointblank/raw/main/man/figures/logo.svg){fig-align="center"
width="212"}

The `pointblank::scan_data()` function provides a HTML report of the
input data to help you understand your data. It contains 6 sections:

-   **Overview (O)**: Table dimensions, duplicate row counts, column
    types, and reproducibility information
-   **Variables (V)**: A summary for each table variable and further
    statistics and summaries depending on the variable type
-   **Interactions (I)**: A matrix plot that shows interactions between
    variables
-   **Correlations (C)**: A set of correlation matrix plots for
    numerical variables
-   **Missing Values (M)**: A summary figure that shows the degree of
    missingness across variables
-   **Sample (S)**: A table that provides the head and tail rows of the
    dataset

The scan can take a little while to run on a large dataset, but you can
also omit sections that are not needed.

First run this example on a small data frame, such as `penguins` from
the `palmerpenguins` package üêß:

```{r}
#| label: Data scan on penguins

pointblank::scan_data(palmerpenguins::penguins) 

```

‚ö†Ô∏è The "Correlations" and "Interactions" sections take the longest to
run, especially on a larger data set like our Food Inspection data.
These sections aren't relevant for this data anyhow, so this time, run
the `data_scan` on `inpsections_raw`, but omit "Correlations" and
"Interactions."

```{r}
#| label: Data scan on inspections_raw

scan <- pointblank::scan_data(____, sections = "____")
scan

```

## Task 2 - Explore the data scan

üîÑ Task

Explore the data scan and share your observations with your neighbor or
in Discord.

1.  What is the most common value for `DBA NAME` and `AKA Name` (hint:
    Toggle details)
2.  What `License #` has the most inspections?
3.  Explore the `Facility Type`. Does the number of distinct values
    surprise you?
4.  What can we the Missing Values diagram tell us about potential data
    quality issues?

How will this inform our data cleaning and validation?

‚úÖ Solution

Use this space if you'd like to do your own code-based exploration.
Maybe see why there is so much variation in `Facility Type`?

```{r}
#| label: Explore variation in the Facility Type

# What variations are there for "Restaurant" 
inspections_raw |> 
  filter(grepl("REST", `Facility Type`)) |> 
  group_by(`Facility Type`) |> 
  tally() |> 
  arrange(desc(n)) |> print(n=20)

```

```{r}
#| label: your space for exploring



```

Some conclusions from exploration:

-   We've got some very messy data, particularly in `FACILITY TYPE`
-   We are going to want the `FACILITY TYPE` to be as clean as possible
    so we can filter out the establishments we don't care about for this
    analysis (e.g., hotels, caterers, etc.).
-   Share your own observations in Discord
