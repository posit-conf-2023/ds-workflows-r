---
format:
  positconfslides-revealjs: 
    chalkboard: true
    slide-number: c/t
    footer: "[https://conf23workflows.training.posit.co/](https://conf23workflows.training.posit.co/)"
    code-copy: true
    center-title-slide: false
    code-link: true
    code-overflow: wrap
    code-annotations: hover
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
execute: 
  eval: true
  echo: true
---

## Data Exploration and {.toc2-light}
<h2>Starting the Workflow Pipeline</h2>
![](https://github.com/rstudio/pointblank/raw/main/man/figures/logo.svg){.absolute top="200" left="50" width="260"} ![](slide_resources/db.png){.absolute top="200" left="310" width="260"}



## Getting Started {.brackets-light}


-   What is this data?
-   Where should I put it?
-   How do I automate data updates?




## What is this Data?


Our first introduction to `pointblank`

::: columns
::: {.column width="15%"}
![](https://github.com/rstudio/pointblank/raw/main/man/figures/logo.svg){style="padding-right: 15px;"}
:::

::: {.column width="75%"}
<br>`pointblank` provides data quality assessment and metadata reporting for data frames and database tables. <https://github.com/rstudio/pointblank>
:::
:::


🧰 The `pointblank::scan_data()` function provides a HTML report of the input data to help you understand your data. 

## Sample data scan

```r
pointblank::scan_data(palmerpenguins::penguins)
```
<br>


<iframe src="slide_resources/scan_penguins.html" width=100% height="650"></iframe>
 
## 

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}
## Activity
👉 Open the file `materials/activities/activity-00_raw_data_exploration.qmd`

You can render the document, but we recommend you interact run each code chunk as you work through it.

Activity objective: explore our Chicago Food Inspections data to get familiar with our data
:::



```{r}
#| echo: false
countdown::countdown(minutes=7,seconds=0, font_size = "4em")
```



 
## Where should I put the data?

:::{.fragment .middle .r-fit-text}
📣 Production data belongs in a database.
:::

## Database Connection Essentials, the single slide edition

:::{.incremental .smaller}
- Database connections have 2 parts: 
  - [A driver installed on your system (not R-specific)]{.teal}
  - [A means to interact with the driver (e.g., R package)]{.teal}
- `odbc` is an R package that provides a generic `DBI`-compliant interface to the ODBC driver installed on your system. *This is your Swiss Army Knife for database connections* and integrates with the "Connections" Pane in the RStudio IDE
- `RPostgres`, `RMariaDB`, `RSQLite`, and `bigrquery` are database-specific R packages that implement the drivers themselves. *They combine the two parts of a connection into one.* In many cases, they are more performant (especially in writing data) and may have more translations available for query types
- These will make the same connection
  ```r
  con <- DBI::dbConnect(RPostgres::postgres(), ...)
  con <- DBI::dbConnect(odbc::odbc(), driver = “Postgres”, ...)
  ```
:::

## Interacting with Databases, the single slide edition

- use `dplyr` to query the database table in the same manner you would a local data frame
  ```r
  df <- dplyr::tbl(con, "table-name")
  
  ```
- Do as much work as possible in the database
  ```r
  df  |> filter(...) |> mutate(...) |> group_by(...) |> summarise(...)
  
  ```

- Use `collect()` to bring the table into memory. Do this as late as possible to save time and resources

  ```r
  df |> ... |> collect()
  
  ```



## More on databases {.content-light}

:::{.callout-tip icon=false}
## {{< bi sign-turn-right-fill color=orange >}} Best practices in working with databases

<https://solutions.posit.co/connections/db/> 


Specific resources:

::::{columns}

:::{.column width=40%}
- [Connect to a database](https://solutions.posit.co/connections/db/getting-started/connect-to-database/)
- [Query a database table](https://solutions.posit.co/connections/db/getting-started/database-queries/)
:::

:::{.column width=60%}

- [Securing credentials](https://solutions.posit.co/connections/db/best-practices/managing-credentials/)
- [Making scripts portable](https://solutions.posit.co/connections/db/best-practices/portable-code/)
:::
::::

:::


## How do I automate data updates?

:::{.fragment}
🧰 Deploy and schedule your notebook on Posit Connect
:::

## 

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}
## Activity
👉 Open the file `materials/activities/activity-01_publish_and_schedule_data_pull.Rmd`

Activity objective: Download data from our raw source, write it to a database, then deploy and schedule this work on Posit Connect so it runs automatically. 

:::



```{r}
#| echo: false
countdown::countdown(minutes=7,seconds=0)
```



## Deployment Methods to Posit Connect

1. Push-button ![](slide_resources/publishIcon_2x.png){height="50" style="vertical-align:middle"} 
2. Git-backed {{< fa brands git-alt >}}
3. Programmatic {{< fa gears >}}

📣 Push-button is good for rapid prototyping. Beyond that, you really should be using [**git-backed or programmatic deployment via CI/CD pipeline**]{.fuchsia} to keep your code in sync with your deployment. 


## Scheduling

::::{.columns}

:::{.column width=30%}
![](slide_resources/scheduling.png){height="700"}
:::

:::{.column width=70%}

:::{.fragment}
<h3>What's the benefit of having this as a standalone scheduled job?</h3>
:::

:::{.fragment}
<h3><br>📣 Breaking up the pieces of your project into uni-taskers keeps your end product lightweight, and your elements are easier to maintain and reuse.</h3>

[*...This will be a running theme in this project*]{.smaller}
:::

:::

::::

##  {.brackets-dark}

::: section-title-dark
Now what?
:::

## Next Steps {.brackets-light}

::: incremental
-   How can I ensure this is quality data? 🤔
-   How will I know when it's not?

:::


## How can I ensure this is quality data?
<br>
🧰 `pointblank` for data validation 



## The `pointblank` workflow



![](https://rstudio.github.io/pointblank/reference/figures/data_quality_reporting_workflow.svg){height=300}

:::{.smaller}

```{.r}
agent <- df |>                                # <1>
  create_agent(
    actions = action_levels(warn_at = 1)) |>  # <2>
  col_vals_between(                           # <3>
    vars(a), 1, 9,
    na_pass = TRUE)  |>                       # <3>
  col_vals_lt(
    vars(c), 12,
    preconditions = ~ . %>% dplyr::mutate(c = a + b))  |>  # <4> 
  col_is_numeric(vars(a, b))  |>              # <3>
  interrogate()                               # <5>
```
1. A local or database table
2. Optionally define alert levels
3. Define validations. There are 36 validation functions! 
4. It's possible to validate against a transformed version of the input table 
5. Interrogate to run the validation
:::


## Pointblank agent report


![](https://rstudio.github.io/pointblank/reference/figures/agent_report.png)

## Your Turn

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}
## Activity
👉 Open the file `materials/activities/activity-02_data_validation.rmd`


:::


## {{< bi sign-turn-right-fill color=orange >}} There's much more to `pointblank`

<https://rstudio.github.io/pointblank/>


:::::{.fragment .fade-in-then-out .absolute top=130}

::::{.columns}

:::{.column width=40%}
- Is your data quality changing over time? Create a `multiagent` to summarize repeated validations.

:::

:::{.column width=50%}
![](slide_resources/multiagent.png)

:::

::::

:::::

:::::{.fragment .fade-in-then-out .absolute top=130}

::::{.columns}

:::{.column width=40%}
- [Is your data quality changing over time? Create a `multiagent` to summarize repeated validations.]{.lightgray} 
- Standardize validations across your organization. Agents and informants can be saved as YAML ✨

:::

:::{.column width=0%}
![](slide_resources/yaml.png){.absolute top=220 width=500}

:::

::::

:::::

:::::{.fragment .fade-in-then-out .absolute top=130}

::::{.columns}

:::{.column width=40%}
- [Is your data quality changing over time? Create a `multiagent` to summarize repeated validations.]{.lightgray} 
- [Standardize validations across your organization. Agents and informants can be saved as YAML ✨]{.lightgray}

:::

:::{.column width=50%}

:::

<h3><br>**In-depth `pointblank` test drive on Posit Cloud: <https://posit.cloud/project/3411822>**</h3>

::::

:::::




## How will I know if my data has issues?

:::{.columns}

:::{.column width=25%}
![](slide_resources/email_option.png){height=700 style="padding-left: 25px;"}
:::

:::{.column width=10%}
[+]{.largest .middle}
:::


:::{.column width=25%}
![](https://github.com/rstudio/blastula/raw/master/man/figures/logo.svg){.middle height=400}
:::

:::{.column width=10%}
[=]{.largest .middle}
:::

:::{.column width=30%}

[🧰 Customized, conditional emails]{.large .middle}

:::

:::

## How `blastula` works with Connect

![](slide_resources/blastula_process.png){.absolute top=130}

:::{.absolute bottom=40 .smaller}
**Key functions:**

`blastula::render_connect_email`

`blastula::attach_connect_email`

`blastula::suppress_scheduled_email`
:::

## Your Turn {.content-light}

:::{.center}
<h2> <br>**Activity Time!**</h2>
:::

:::{.callout-note icon=false}
## Activity
👉 Open the file `materials/activities/activity-03_conditional_emails.rmd`

:::

## Other Alerting Approaches {.content2-light}

{{< bi sign-turn-right-fill color=orange >}} Send alerts to a Slack channel or MS Teams, or via text message:
<https://rviews.rstudio.com/2020/06/18/how-to-have-r-notify-you/>

## {.toc-people-dark}
<br><br>
[**Break Time ☕ **]{.larger}


