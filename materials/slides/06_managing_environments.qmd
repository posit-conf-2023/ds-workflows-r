---
format:
  positconfslides-revealjs: 
    chalkboard: true
    slide-number: c/t
    footer: "[https://posit-conf-2023.github.io/ds-workflows-r/](https://posit-conf-2023.github.io/ds-workflows-r/)"
    code-copy: true
    center-title-slide: false
    code-link: true
    code-overflow: wrap
    code-annotations: hover
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
execute: 
  eval: true
  echo: true
---

## Managing Environments {.toc-light}

![](https://rstudio.github.io/renv/logo.svg){.absolute top="200" left="50" width="260"} ![](slide_resources/devtestprod.png){.absolute top="300" left="310" width="260"}

<!-- ## Session Outline -->

<!-- -   Environments management (renv, and use PPM as a repository) -->

<!-- -   Dev, test, prod workflows with git backed and CICD -->

<!-- -   hot swap urls -->

<!-- -   deploying content that uses a private package -->

<!-- -   interoperability (maybe just note in the recap) -->

## Where we are

![](slide_resources/workflow_diagram.jpg){fig-align="center"}

## How do we keep this all running smoothly?

::: fragment
<br> Some surprises are good

![](https://media.tenor.com/G79O8UU7664AAAAC/oprah-winfrey.gif)
:::

::: fragment
<br> But this is [*production*]{.fuchsia}, not showbiz. <sigh>
:::

## How to avoid common pitfalls and look like a professional while doing itâ„¢

-   Manage your environment
-   Use a dev-test-prod workflow

## Environments

> Think of your data science workbench as a kitchen:
>
> -   The [**repository**]{.fuchsia} is the grocery store, a central place where everyone gets their packages.
> -   The [**library**]{.fuchsia} is the pantry, where you keep your own private set of packages.
> -   [**Installation**]{.fuchsia} is the shopping trip to stock your library with packages from the repository.

## (notes)

Talk about PPM as the repository. Have private packages too. this makes it really easy to move from dev to prod.

## Environments

ðŸ‘¿ Sometimes things go wrong

::: incremental
-   Revisited an old R script, and it didn't work.
    -   "I swear that {`insert function from package`} worked before..."
-   Shared R code with a colleague, but they can't get it to run.
    -   "Why does this run on my computer, but not on Sue's?"
    -   "John pulled in my project from GitHub but can't get it to work!"
-   You modified something in one project, and borked something in another project.
    -   "I upgraded a package in one project, and now my other projects don't work!"
:::

## Enter `renv`

![](https://github.com/rstudio/hex-stickers/blob/main/PNG/renv.png?raw=true){.absolute top="0" right="1200" width="70"}

The **renv** package helps you create **r**eproducible **env**ironments for your R projects. Use **renv** to make your R projects more:

::: incremental
-   [**Isolated**]{.fuchsia}: Installing a new or updated package for one project **won't break your other projects**, and vice versa. That's because **renv** gives each project its own private package library.

-   [**Portable**]{.fuchsia}: Easily transport your projects from **one computer to another**, even across different platforms. **renv** makes it easy to install the packages your project depends on.

-   [**Reproducible**]{.fuchsia}: **renv** **records the exact package versions** you depend on, and ensures those exact versions are the ones that get installed wherever you go.
:::

## Enter `renv`

![](slide_resources/before_renv.jpg){.absolute right="900" width="400"}

::: fragment
![](slide_resources/after_renv.jpg){.absolute right="300" width="400"}
:::

## `renv.lock`

-   `renv` is designed to keep track of your **PROJECT'S PACKAGE DEPENDENCIES**
-   As your install, update, or delete packages from your project, you want to update your `renv.lock` file using `renv::snapshot()`

``` json
{
  "R": {
    "Version": "4.3.1",
    "Repositories": [
      {
        "Name": "RSPM",
        "URL": "https://packagemanager.posit.co/cran/latest"
      }
    ]
  },
  "Packages": {
    "BH": {
      "Package": "BH",
      "Version": "1.81.0-1",
      "Source": "Repository",
      "Repository": "RSPM",
      "Hash": "68122010f01c4dcfbe58ce7112f2433d"
    },
    "DBI": {
      "Package": "DBI",
      "Version": "1.1.3",
      "Source": "Repository",
      "Repository": "RSPM",
      "Requirements": [
        "R",
        "methods"
      ],
      "Hash": "b2866e62bab9378c3cc9476a1954226b"
    },
    "DT": {
      "Package": "DT",
      "Version": "0.28",
      "Source": "Repository",
      "Repository": "RSPM",
      "Requirements": [
        "crosstalk",
        "htmltools",
        "htmlwidgets",
        "jquerylib",
        "jsonlite",
        "magrittr",
        "promises"
      ],
      "Hash": "ab745834dfae7eaf71dd0b90f3b66759"
    }
```

## `renv.lock`

-   `renv` is designed to keep track of your **PROJECT'S PACKAGE DEPENDENCIES**
-   As your install, update, or delete packages from your project, you want to update your `renv.lock` file using `renv::snapshot()`
-   Restore a project's package dependencies using `renv::restore()`

<br>

<br>

::: fragment
::: {style="text-align: center; font-size: 160%; color: #EE6331"}
Follow along with me - Getting started with `renv`
:::
:::

## Dev-Test-Prod

Ensure your data products behave as expected and there are no surprises

![](slide_resources/devtestprod2.png){fig-align="center" height="620"}


## Deployment Methods to Posit Connect

:::{.fragment}

1. Push-button ![](slide_resources/publishIcon_2x.png){height="50" style="vertical-align:middle"} 
2. Git-backed {{< fa brands git-alt >}}
3. Programmatic {{< fa gears >}}

:::
:::{.fragment}

ðŸ“£ Push-button is good for rapid prototyping. Beyond that, you really should be using [**git-backed or programmatic deployment via CI/CD pipeline**]{.fuchsia} to keep your code in sync with your deployment. 

<!-- TODO: find a place to have a git back deploy activity -->
:::



## Dev-Test-Prod Methods // Git-backed Deployment

::: columns
::: {.column width="40%"}
![](slide_resources/gitbacked.png){height="800"}
:::

::: {.column .smaller width="60%"}
::: fragment
1.  Create manifest describing the project environment and dependencies

``` {.r code-line-numbers="false"}
# from within project directory
rsconnect::writeManifest() 
```
:::

::: fragment
2.  Commit `manifest.json` to git repo
:::

::: fragment
3.  Import from Git

![](slide_resources/import-from-git.png){height="380" style="padding-left: 50px;"}

Ref: <https://docs.posit.co/connect/user/git-backed/>
:::
:::
:::

## Dev-Test-Prod Methods // CI/CD Deployment

::: columns
::: {.column width="40%"}
![](slide_resources/cicd){height="800"}
:::

::: {.column .smaller width="60%"}
::: fragment
-   A CI/CD pipeline can utilize:
    -   the API directly
    -   a Posit-created GitHub Action
    -   a Python (`rsconnect-python`) or R (`connectapi`) package
:::

::: fragment
-   See <https://solutions.posit.co/operations/deploy-methods/ci-cd/> for example CI/CD deployment scripts for:
    -   GitHub Actions
    -   GitLab CI/CD
    -   Azure Pipelines
    -   Bitbucket Pipelines
    -   Jenkins
:::
:::
:::

## More Resources

-   Dev/Test/Prod with Posit Team: <https://solutions.posit.co/operations/code-promotion/>
-   Publishing Workflows for Connect: <https://solutions.posit.co/operations/publishing-wkflow/>

## Workshop Feedback {.content2-light}

Please go to [pos.it/conf-workshop-survey](pos.it/conf-workshop-survey). Your feedback is crucial! Data from the survey informs curriculum and format decisions for future conf workshops, and we really appreciate you taking the time to provide it.
