---
format:
  positconfslides-revealjs: 
    chalkboard: true
    slide-number: c/t
    footer: "[Data Science Workflows with Posit Tools - R Focus](https://katie.quarto.pub/ds-workflows-r/)"
    code-copy: true
    center-title-slide: false
    code-link: true
    code-overflow: wrap
    code-annotations: hover
    highlight-style: a11y
    width: "1600"
    height: "900"
    filters:
      - positconfslides
execute: 
  eval: true
  echo: true
editor: 
  markdown: 
    wrap: 72
---

## Effective Delivery of Insights{.toc2-light}

![](https://github.com/rstudio/hex-stickers/blob/main/PNG/shiny.png?raw=true){.absolute top="170" left="180" width="260"}
![](https://pkgs.rstudio.com/connectapi/reference/figures/logo.svg){.absolute top="395" left="50" width="260"}
![](https://rstudio.github.io/connectwidgets/reference/figures/logo.png){.absolute top="395" left="310" width="260"}




## Review

![](slide_resources/workflow_diagram.jpg){fig-align="center"}

## Section Agenda {.brackets-light}

<br>

- Using Shiny to deliver interactive content
- Principles of Shiny in production
- Managing and monitoring production content


## Let's talk Shiny

![](https://raw.githubusercontent.com/rstudio/hex-stickers/580e9bada770756d25dbd3696159744d1e9c9251/SVG/shiny.svg){.absolute
style="padding-right: 15px;" left="600" top="10" width="200"} <br><br>

::: columns
::: {.column width="50%"}
::: fragment
Whether you're here <br> in your Shiny journey:

![](slide_resources/andriyko-podilnyk-RCfi7vgJjUY-unsplash.jpg)
<br>[Photo by
<a href="https://unsplash.com/@andriyko?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Andriyko
Podilnyk</a> on
<a href="https://unsplash.com/photos/orange-tabby-kitten-in-grasses-RCfi7vgJjUY?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>]{.smallest}
:::
:::

::: {.column width="50%"}
::: fragment
<br> Or here:

![](slide_resources/francesco-ZxNKxnR32Ng-unsplash.jpg)

[Photo by
<a href="https://unsplash.com/@detpho?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Francesco</a>
on
<a href="https://unsplash.com/photos/ZxNKxnR32Ng?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a>]{.smallest}
:::
:::
:::

## ðŸ§° Shiny resources

-   Get started with Shiny (R or Python!)
    <https://shiny.posit.co/getstarted>
-   Gallery of examples <https://shiny.posit.co/r/gallery/>
-   **The authoritative reference, Mastering Shiny**
    <https://mastering-shiny.org>
-   Helper packages
    -   [`bslib`](https://rstudio.github.io/bslib/) - add themes,
        components, and layouts with ease
    -   [`thematic`](https://rstudio.github.io/thematic/) - extends your
        Shiny theme to plots\
    -   [`shinyuieditor`](https://rstudio.github.io/shinyuieditor/index.html#trouble-installing/) -
        a visual tool to help create the UI portion of your Shiny app

## Shiny in production

<br> "But my app runs great on my laptop..." <br><br>

::: fragment
Two sides to this coin:

1.  Optimize your app
2.  Tune your runtime settings
:::

## Shiny in production --- Optimize your app

<br>

ðŸ“£ Design principle: Make your app a lightweight presentation layer
<br><br>

::: columns
::: fragment
::: {.column width="45%"}
{{< bi sign-turn-right-fill color=orange >}} Performance workflow:

::: smaller
-   Add logging to app, either basic `message` statements or use
    [`log4r`](https://github.com/johnmyleswhite/log4r) package
-   use [`shinyloadtest`](https://rstudio.github.io/shinyloadtest/) to
    simulate app performance under load
-   use [`profvis`](https://rstudio.github.io/profvis/) to profile your
    app to identify bottlenecks
-   Optimize app (in order of value-add):
    -   Move work upstream out of Shiny
    -   Make code faster
    -   Use caching
    -   Use async
:::
:::

::: {.column width="50%"}
::: {style="background: #F6F6F6; width: 600px; height: 400px; margin: 20px; padding: 20px; box-shadow: 0 18px 18px -9px lightgray; margin-left: auto; margin-right: auto;"}
ðŸ§° References:

-   Joe Cheng's [Shiny in Production](https://youtu.be/Wy3TY0gOmJw) talk
    at 2019 rstudio::conf
-   [Mastering Shiny,
    Performance](https://mastering-shiny.org/performance.html) chapter
:::
:::
:::
:::

## ðŸ‘‹ Let's meet our Shiny App

::: smaller
<https://connect.conf23workflows.training.posit.co/chicago-food-r/food-inspections-app/>
:::

![](slide_resources/shiny_app_UI.png){fig-align="center"}

## How does our Shiny App Work?

-   Code for App: `materials/project/04_inspector_shiny_app/app.R`

```{r}
#| eval: false
#| code-line-numbers: "4-7"

# Make prediction (add .pred_FAIL to table)
  prediction_info <- reactive({
    
    prediction_df <- selected_info() |> 
      select(-aka_name) 
    
    fail_prediction <- predict(endpoint, prediction_df)$.pred_FAIL
    
    selected_info() |> 
      mutate(fail_prediction = round(fail_prediction * 100, 3))
    
  })
```

## Activity

::: {.callout-note icon="false"}
## Activity

ðŸ‘‰ Open the file `materials/activities/activity-07_shiny.qmd`

:::

## Shiny on Connect

Runtime settings

::: columns
::: {.column width="30%"}
![](slide_resources/runtime_settings.png)
:::

::: {.column width="70%"}
::: r-stack
![](https://media.giphy.com/media/3o6Mbsras7qdAwgABW/giphy.gif){.fragment
.fade-in-then-out fig-align="center"}

![](https://media.giphy.com/media/lvlLuc2zhi39C/giphy.gif){.fragment
.fade-in-then-out fig-align="center"}

::: fragment
**Min processes** --- Keep a process running on the server at all times?

**Max processes** --- Put a bound on the number of processes spawned?

**Connections per process** --- [A connection = a browser tab]{.teal}.
How many connections will share the same process? Call this **n**

**Load factor** --- Much like *min processes*, how early do you want to
start a new process for that **n + 1** connection?
:::

:::
:::
:::

## Posit Connect

The Shiny Restaurant Analogy

Let's say you are the **manager** of a restaurant, and you need to
determine two things:

1.  How many chefs should I hire?
2.  How many customers can I accommodate at once?

::: fragment
-   Chef == [**process**]{.fucshia}
-   Customer == [**connection**]{.fucshia}
:::

## Posit Connect

The Shiny Restaurant Analogy

::: r-stack
::: fragment
![](slide_resources/chef-1.jpg)
:::

::: fragment
![](slide_resources/chef-2.jpg)
:::

::: fragment
![](slide_resources/chef-3.jpg)
:::

::: fragment
![](slide_resources/chef-4.jpg)
:::
:::

##  {.brackets-dark}

::: section-title-dark
Managing Content
:::

## Managing Content {.brackets-light}

::: incremental
-   How can I organize this content so stakeholders can find it?
-   How will I know if people are consuming my content?
:::

## How can I organize this content so stakeholders can find it?

1.   [Tags in
    Connect](https://docs.posit.co/connect/admin/content-management/index.html#tags)

![](slide_resources/tag_schema.png){height="400" fig-align="center"}

2.   ðŸ§° [`connectwidgets`](https://rstudio.github.io/connectwidgets/) for
    content curation ![](https://rstudio.github.io/connectwidgets/reference/figures/logo.png){.absolute top="650" right="420" width="220"}

## Connectwidgets flow

Incorporate into a stylized R Markdown or Quarto document or Shiny
application.

``` {.r code-line-numbers="1-5|7-14|16-27"}
# Establish a connection to the Connect Server
client <- connect(
  server  = Sys.getenv("CONNECT_SERVER"),
  api_key = Sys.getenv("CONNECT_API_KEY")
  )

# Return a dataframe of content information to curate
project_content <- client |> 
  content() |> 
  # filter helpers:
  by_tag() |> 
  by_owner() |> 
  # or use your own dplyr filter
  dplyr::filter()
  
# Use widgets to lay out your content
### card
project_content |> 
  rsc_card()

### grid
project_content |> 
  rsc_grid()

### table
project_content %>%
  rsc_table()
```

::: callout-tip
Content returned by `connectwidgets::content` will be scoped to the API
key provided.
:::

## Example

<https://colorado.posit.co/rsc/chicago-food-r/>

::: {.callout-note icon="false"}
## Activity

ðŸ‘‰ Open the file `materials/activities/activity-08_Connectwidgets.qmd`
:::

## How will I know if people are consuming my content?

::: fragment
<br>

ðŸ§° Posit Connect Server API
:::

## Posit Connect Server API endpoints

*Most endpoints require an API Key*, and [**results will be scoped to
the permissions of the key**]{.fuchsia}. <br>

::: columns
::: {.column width="50%"}
**Helpful to publishers:**

-   List/Update content
-   Get content details
-   Set environment variables
-   Change permissions
-   Manage content tags
-   Manage content custom URL
-   [âœ¨ Content usage âœ¨]{.teal}
:::

::: {.column width="50%"}
**Helpful to admins:**

-   ðŸ‘ˆ all that
-   Audit logs
-   User and group management
-   Job management
:::
:::

See full documentation at <https://docs.posit.co/connect/api/>

## Example Content Usage Report

::: columns
::: {.column width="40%"}
[![](slide_resources/usage-report.png){height="800"}](https://connect.conf23workflows.training.posit.co/chicago-food-r/content-usage/)
:::

::: {.column width="60%"}
``` {.r .code-overflow-wrap}
...
con <- connectapi::connect()

app_usage <- get_usage_shiny(
  client,
  from = report_from,
  limit = Inf,
  content_guid = guid
)
...
```
:::
:::

{{< bi sign-turn-right-fill color=orange >}} See more examples:
<https://solutions.posit.co/operations/connect-apis/>

## Accessing the Connect Server API

-   Interact remotely with the Connect Server API using HTTP requests
    directly via:
    -   `curl` - Linux tool for making HTTP calls
    -   `httr` - R HTTP library
    -   `requests` - Python HTTP library
-   Or use [`connectapi`](https://pkgs.rstudio.com/connectapi/) R
    package, which provides a wrapper around HTTP requests

![](https://pkgs.rstudio.com/connectapi/reference/figures/logo.svg){.absolute
top="590" left="260" width="220"}

## Connect Server API Resources

-   Reference <https://docs.posit.co/connect/api/>
-   Cookbook <https://docs.posit.co/connect/cookbook/>
-   Example reports and apps
    <https://solutions.posit.co/operations/connect-apis/>
-   R package `connectapi` that is a wrapper around the API
    <https://pkgs.rstudio.com/connectapi/>
